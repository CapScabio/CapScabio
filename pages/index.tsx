import { useEffect } from "react";
import { fetchConfig, readLocalConfig } from "../lib/utils";
import { Config } from "../types/config";

// Components
import Head from "next/head";
import Footer from "../components/Footer";
import Container from "../components/Container";
import Paper from "../components/Paper";
import Title from "../components/Title";
import PaperBody from "../components/PaperBody";
import LinksList from "../components/LinksList";
import Logo from "../components/Logo";

// Types
import { Block } from "../types/block";

// Google Tag manager
import TagManager, { TagManagerArgs } from "react-gtm-module";

const tagManagerArgs: TagManagerArgs = {
  gtmId: "GTM-WZGV6DS",
};
interface HomeProps {
  config: Config;
}

export default function Home({ config }: HomeProps) {
  useEffect(() => {
    TagManager.initialize(tagManagerArgs);
  });

  const { blocks, html, main } = config;
  return (
    <div>
      <Head>
        <title>{html?.title}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Container>
        <Paper>
          <Logo title={main.title} />
          <Title>{main?.title}</Title>
          <div className='divide-y divide-gray-300/50'>
            <PaperBody>
              <LinksList links={blocks as Block[]} />
            </PaperBody>
            <Footer>
              <p className='text-slate-400'>Copialo GRATIS!</p>
            </Footer>
          </div>
        </Paper>
      </Container>
    </div>
  );
}

// Uncomment for dynamic rendering

export async function getServerSideProps(context: any) {
  const subdomain = context.req.headers.host.split(".")[0];
  let config: Config = await readLocalConfig();

  if (config.core?.github_fetch) {
    const url = `https://raw.githubusercontent.com/${subdomain}/.lacrypta/main/config.yml`;
    try {
      config = await fetchConfig(url);
    } catch (e) {
      console.warn("Invalid username");
    }
  }

  return {
    props: { config },
  };
}
